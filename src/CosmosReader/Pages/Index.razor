@page "/"
@inject CosmosService _cosmos;
@inject IJSRuntime JS;
@using CsvHelper;
@using System.Globalization;

<PageTitle>Edge Logins Data</PageTitle>

<h1 class="pb-3">Edge Logins Data</h1>
<div class="container pb-3 w-100 m-0 p-0">
    <div class="row justify-content-start">
        <div class="col-3"><RadzenButton Text="Load Data" Click=@LoadData IsBusy="@hideLoadButton" BusyText="Loading..." class="w-100" /></div>
        @if (data is not null) 
        {
            <div class="col-3"><RadzenButton Text="Export to CSV (Counts)" Click=@DownloadLoginDataCountsCsv class="w-100" /></div>
            <div class="col-3"><RadzenButton Text="Export to CSV (w/ Logins)" Click=@DownloadLoginDataFullCsv class="w-100" /></div>
            <div class="col-3"><RadzenButton Text="Export to CSV (Selected)" Click=@DownloadUserLoginsCsv class="w-100" Disabled="@disableExportButton" /></div>
        }
    </div>
</div>
@if (data is not null) { 
    <p><strong> Item Count - @data.Count()</strong></p>
}

<p>
@if (data is not null)
{
    <RadzenDataGrid @ref="grid" RowRender="@RowRender" ExpandMode="@DataGridExpandMode.Multiple" 
        Data="@data" TItem="LoginData" AllowSorting="true" AllowMultiColumnSorting="true"
        AllowPaging="true" PageSize="15" AllowFiltering="true" SelectionMode="DataGridSelectionMode.Single" RowSelect="@SelectRow">
        <Template Context="LoginData">
            <RadzenDataGrid Data="@LoginData.Logins" TItem="Login" AllowSorting="true" AllowMultiColumnSorting="true"
                AllowPaging="true" PageSize="10" AllowFiltering="true">
                <Columns>
                    <RadzenDataGridColumn TItem="Login" Property="OriginUrl" Title="URL" FilterProperty="OriginUrl.ToString()" />
                    <RadzenDataGridColumn TItem="Login" Property="UserName" Title="Username" />
                    <RadzenDataGridColumn TItem="Login" Property="NeverRemember" Title="Never Remember" />
                </Columns>
            </RadzenDataGrid>
        </Template>
        <Columns>
            <RadzenDataGridColumn TItem="LoginData" Property="Username" Title="Username" />
            <RadzenDataGridColumn TItem="LoginData" Property="ComputerName" Title="Computer Name" />
            <RadzenDataGridColumn TItem="LoginData" Property="ProfileName" Title="Profile Name" />
            <RadzenDataGridColumn TItem="LoginData" Property="LoginsSavedCount" Title="# of Saved" SortOrder="SortOrder.Descending" />
            <RadzenDataGridColumn TItem="LoginData" Property="LoginsBlockedCount" Title="# of Blocked" />
            <RadzenDataGridColumn TItem="LoginData" Property="FileSize" Title="FileSize">
                <Template Context="Login">
                    @String.Format("{0} KB", Login.FileSizeInKB)
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
</p>

@code {
    IEnumerable<LoginData>? data;
    RadzenDataGrid<LoginData>? grid;
    LoginData? selectedRow;
    bool hideLoadButton = false;
    bool disableExportButton = true;

    async void LoadData()
    {
        data = null;
        hideLoadButton = true;
        data = await _cosmos.GetAllDocuments();
        hideLoadButton = false;
        StateHasChanged();
    }

    void RowRender(RowRenderEventArgs<LoginData> args)
    {
        args.Expandable = args.Data.LoginsTotalCount > 0;
    }

    void SelectRow(LoginData row)
    {
        disableExportButton = false;
        selectedRow = row;
    }

    async Task DownloadLoginDataCountsCsv()
    {
        MemoryStream memStream = new();

        using var writer = new StreamWriter(memStream);

        using CsvWriter csv = new(writer,CultureInfo.InvariantCulture);

        csv.Context.RegisterClassMap<LoginDataMap>();
        csv.WriteRecords(data);

        string fileName = "LoginDataCounts.csv";
        string contentType = "text/plain";

        await JS.InvokeVoidAsync("downloadFile", fileName, contentType, memStream.ToArray());
    }

    async Task DownloadLoginDataFullCsv()
    {
        if (data is null) { return; }
        List<LoginDataFull> dataFull = new();
        foreach (var d in data)
        {
            var obj = LoginDataFull.GetFullData(d);
            dataFull.AddRange(obj);
        }
        MemoryStream memStream = new();

        using var writer = new StreamWriter(memStream);

        using CsvWriter csv = new(writer,CultureInfo.InvariantCulture);

        csv.Context.RegisterClassMap<LoginDataFullMap>();
        csv.WriteRecords(dataFull);

        string fileName = "LoginDataWithUrls.csv";
        string contentType = "text/csv";

        await JS.InvokeVoidAsync("downloadFile", fileName, contentType, memStream.ToArray());
    }

    async Task DownloadUserLoginsCsv()
    {
        if (selectedRow is null) { return; }
        var userData = selectedRow;
        List<LoginDataFull> dataFull = new();
        
        var obj = LoginDataFull.GetFullData(userData);
        dataFull.AddRange(obj);

        MemoryStream memStream = new();

        using var writer = new StreamWriter(memStream);

        using CsvWriter csv = new(writer,CultureInfo.InvariantCulture);

        csv.Context.RegisterClassMap<LoginDataFullMap>();
        csv.WriteRecords(dataFull);

        string fileName = String.Concat(userData.Username,"-",userData.ComputerName,"-",userData.ProfileName,".csv");
        string contentType = "text/plain";

        await JS.InvokeVoidAsync("downloadFile", fileName, contentType, memStream.ToArray());
    }
}


